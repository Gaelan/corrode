#!/usr/bin/env python3

import fnmatch
import hashlib
import os
import subprocess
import sys

cflags = sys.argv[1:]

if '-c' in cflags:
    try:
        [rsfile, outfile] = subprocess.run(
            ['corrode'] + cflags,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        ).stdout.splitlines()

        rustwarn = subprocess.run(
            ['rustc', '--crate-type=dylib', '--emit', 'obj', '-o', outfile, rsfile],
            stderr=subprocess.PIPE,
            check=True,
        ).stderr
        if rustwarn:
            sys.stderr.buffer.write(rustwarn)
    except subprocess.SubprocessError as e:
        with open('errors-' + hashlib.md5(e.stderr).hexdigest(), 'wb') as f:
            f.write(e.stderr)

        sys.exit(subprocess.run(['gcc'] + cflags).returncode)
else:
    sysroot = subprocess.run(
        ['rustc', '--print', 'sysroot'],
        stdout=subprocess.PIPE,
        check=True,
    ).stdout.strip()

    rustlibdir = sysroot + b'/lib/rustlib/x86_64-unknown-linux-gnu/lib/'

    needed = [b'libcompiler-rt.a'] + [
        b'lib' + lib + b'-*.rlib'
        for lib in (b'core', b'std', b'collections', b'panic_unwind', b'rustc_unicode', b'unwind', b'rand', b'alloc', b'alloc_system', b'libc')
    ]
    alllibs = os.listdir(rustlibdir)

    rustlibs = [ rustlibdir + fnmatch.filter(alllibs, pat)[0] for pat in needed ]

    sys.exit(subprocess.run(['gcc'] + cflags + rustlibs + ['-lgcc_eh']).returncode)
